#|
    ===> PLEASE DO NOT DISTRIBUTE THE SOLUTIONS PUBLICLY <===

   We ask that solutions be distributed only locally -- on paper, on a
   password-protected webpage, etc.

   Students are required to adhere to the University Policy on Academic
   Standards and Cheating, to the University Statement on Plagiarism and the
   Documentation of Written Work, and to the Code of Student Conduct as
   delineated in the catalog of Undergraduate Programs. The Code is available
   online at: http://www.umb.edu/life_on_campus/policies/code/

|#
;; PLEASE DO NOT CHANGE THE FOLLOWING LINES
#lang errortrace racket
(require "hw5-util.rkt")
(require rackunit)
(provide d:eval-exp d:eval-term)
(define (d:apply-arg1 app)
  (first (d:apply-args app)))
(define (d:lambda-param1 lam)
  (first (d:lambda-params lam)))
;; END OF REQUIRES





;; Exercise 1
(define/contract (d:eval-exp mem env exp)
  (-> mem? handle? d:expression? eff?)

  (define mv (environ-get mem env exp))
  (define (eme exp) (eff mem exp))
  (define af (d:apply-func exp))
  (define mb (d:eval-exp mem env (d:apply-func exp)))


  (define mb (eff-state (d:eval-exp mem env (d:apply-func exp))))
  (define nb (eff-result (d:eval-exp mem env (d:apply-func exp))))

  (define nl (d:closure-env (eff-result (d:eval-exp mem env (d:apply-func exp)))))
  (define mp (d:closure-decl (eff-result (d:eval-exp mem env (d:apply-func exp)))))

  
  (cond
   [(d:variable? exp)(eff mem mv)]
   [(d:lambda? exp)(eff mem (d:closure env exp))]
   [(d:value? exp) (eme exp)]
   [(d:apply? exp) (d:eval-exp mem env exp)]

   
   ))


   
  





































;; Exercise 2
(define/contract (d:eval-term mem env term)
  (-> mem? handle? d:term? eff?)
  'todo)






















;; Exercise 3 (Manually graded)
#|
PLEASE REPLACE THIS TEXT BY YOUR ANSWER.
YOU MAY USE MULTIPLE LINES.
|#
